
R version 2.8.1 (2008-12-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #dyn.load("../src/R2Cuba.so");source("../R/cuhre.R"); source("../R/commoncuba.R"); source("../R/divonne.R");source("../R/suave.R");source("../R/vegas.R")
> library("R2Cuba")
> # Essai d'integrandes avec diverses configurations d'arguments
> # +++++++++++++++++++++++++++++++
> integrand <- function(arg, a, sigma, toto) {
+   x <- arg[1]
+   y <- arg[2]
+   z <- arg[3]
+   ff <- sin(x)*cos(y)*exp(z);
+ #  print(sigma)
+ return(ff)
+ } # End integrand
> 
> integrand2 <- function(arg) {
+     x <- arg[1]
+   y <- arg[2]
+   z <- arg[3]
+   ff <- sin(x)*cos(y)*exp(z);
+  return(ff)
+ } # End integrand2
> 
> integrand3 <- function(arg, phase) {
+     x <- arg[1]
+   y <- arg[2]
+   z <- arg[3]
+   ff <- sin(x)*cos(y)*exp(z);
+   #  print(phase)
+  return(ff)
+ } # End integrand3
> 
> integrand4 <- function(arg, phase, sigma=0) {
+     x <- arg[1]
+   y <- arg[2]
+   z <- arg[3]
+ #  print(sigma)
+     ff <- sin(x)*cos(y)*exp(z);
+  return(ff)
+ } # End integrand4
> 
> NDIM <- 3
> NCOMP <- 1
> 
> # --------------------divonne ------------------------------
> # plante: sigma manquant dans l'appel : print(divonne(NDIM, NCOMP,  integrand,  flags= list(verbose=0)))
> print(divonne(NDIM, NCOMP,  integrand2,  flags= list(verbose=0)))

integral: 0.6646195 (+-0.00064)
nregions: 14; number of evaluations:  3052; probability:  1.110223e-16 
> print(divonne(NDIM, NCOMP,  integrand3,  flags= list(verbose=0)))

integral: 0.6646195 (+-0.00064)
nregions: 14; number of evaluations:  3052; probability:  1.110223e-16 
> # plante: sigma manquant dans l'integrande: print(divonne(NDIM, NCOMP,  integrand2,  flags= list(verbose=0), sigma=1))
> print(divonne(NDIM, NCOMP,  integrand4,  flags= list(verbose=0), sigma=1))

integral: 0.6646195 (+-0.00064)
nregions: 14; number of evaluations:  3052; probability:  1.110223e-16 
> 
> # --------------------cuhre ------------------------------
> # plante: sigma manquant dans l'appel : print(cuhre(NDIM, NCOMP,  integrand,  flags= list(verbose=0)))
> print(cuhre(NDIM, NCOMP,  integrand2,  flags= list(verbose=0)))

integral: 0.6646697 (+-3.3e-11)
nregions: 2; number of evaluations:  381; probability:  0 
> print(cuhre(NDIM, NCOMP,  integrand3,  flags= list(verbose=0)))

integral: 0.6646697 (+-3.3e-11)
nregions: 2; number of evaluations:  381; probability:  0 
> # plante: sigma manquant dans l'integrande: print(cuhre(NDIM, NCOMP,  integrand2,  flags= list(verbose=0), sigma=1))
> print(cuhre(NDIM, NCOMP,  integrand4,  flags= list(verbose=0), sigma=1))

integral: 0.6646697 (+-3.3e-11)
nregions: 2; number of evaluations:  381; probability:  0 
> print(cuhre(3,1,  integrand4,  flags= list(verbose=0), sigma=1))

integral: 0.6646697 (+-3.3e-11)
nregions: 2; number of evaluations:  381; probability:  0 
> 
> # --------------------suave ------------------------------
> print(suave(NDIM, NCOMP,  integrand2,  flags= list(verbose=0)))

integral: 0.6647464 (+-0.00061)
nregions: 6; number of evaluations:  6000; probability:  0.001946077 
> # --------------------vegas ------------------------------
> print(vegas(NDIM, NCOMP,  integrand2,  flags= list(verbose=0)))

integral: 0.6648107 (+-0.00049)
number of evaluations:  10000; probability:  0.08870493 
> integrandp <- function(arg, weight, ...) {
+ 
+   x <- arg[1]
+   y <- arg[2]
+   z <- arg[3]
+  # print( weight, ...)
+     ff <- sin(x)*cos(y)*exp(z);
+ return(ff)
+ } # fin integrandp
> EPSREL <- 1e-3
> EPSABS <- 1e-12
> print(vegas(NDIM, NCOMP, integrandp, digits=1,
+                   rel.tol=EPSREL,  abs.tol=EPSABS,
+              flags=list(verbose=0)))

integral: 0.6648107 (+-0.00049)
number of evaluations:  10000; probability:  0.08870493 
> # ----------------------------------------
> # Essai avec state
> print(vegas(NDIM, NCOMP, integrand4,
+                   rel.tol=1e-50,  abs.tol=1e-50,
+              flags=list(verbose=0), state.file="toto"))

integral: 0.6647079 (+-0.00015)
number of evaluations:  52000; probability:  0.01204850 
failed with message 'Dimension out of range'
> print(vegas(NDIM, NCOMP, integrand,
+                   rel.tol=EPSREL,  abs.tol=EPSABS,
+              flags=list(verbose=3, pseudo.random=1, mersenne.seed=10,
+                vegas.gridno=4), sigma=5))
Vegas input parameters:
  ndim 3
  ncomp 1
  rel.tol 0.001
  abs.tol 1e-12
  smooth 0
  pseudo.random  1
  final 0
  verbose 3
  min.eval 0
  max.eval 50000
  nstart 1000
  nincrease 500
  vegas.gridno 0
  vegas.state "toto"

Restoring state from toto.
Iteration 14:  59500 integrand evaluations so far
[1] 0.664665 +- 0.000137014  	chisq 4.9055 (13 df)
integral: 0.6646652 (+-0.00014)
number of evaluations:  59500; probability:  0.02278525 
> 
